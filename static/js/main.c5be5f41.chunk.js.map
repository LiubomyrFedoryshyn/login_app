{"version":3,"sources":["Components/SignUp.js","Components/LogIn.js","LoginApp.js","serviceWorker.js","index.js"],"names":["SignUp","state","signUoForm","firstName","lastName","email","password","typeSwitcher","formTriggered","onSubmit","setState","validateOnChange","event","input","target","form","value","name","className","this","signUp","heading","required","classNames","placeholder","id","type","onChange","onClick","Component","LogIn","loginForm","autoComplete","to","href","app","signUpFormActive","toggleForm","formToggler","CSSTransition","in","appear","timeout","active","Boolean","window","location","hostname","match","ReactDOM","render","LoginApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5be5f41.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport classNames from \"classnames\";\n\nclass SignUp extends Component {\n  state = {\n    signUoForm: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\"\n    },\n    typeSwitcher: false,\n    formTriggered: false\n  };\n\n  get heading() {\n    return (\n      <div className=\"heading\">\n        <h2>Sign Up for Free</h2>\n      </div>\n    );\n  }\n\n  get signUp() {\n    const { firstName, lastName, email, password } = this.state.signUoForm;\n    return (\n      <div className=\"form-wrapper\">\n        {this.heading}\n        <form name=\"signUoForm\" onSubmit={this.onSubmit}>\n          <div className=\"field flexed\">\n            <div className=\"with-icon\">\n              <input\n                required\n                className={classNames(\"firstName\", {\n                  \"is-danger\": !firstName && this.state.formTriggered\n                })}\n                placeholder=\"First Name *\"\n                name=\"firstName\"\n                id=\"firstName\"\n                type=\"text\"\n                value={firstName}\n                onChange={this.validateOnChange}\n              />\n              <i className=\"fas fa-user-md\"></i>\n            </div>\n            <input\n              required\n              className={classNames(\"lastName\", {\n                \"is-danger\": !lastName && this.state.formTriggered\n              })}\n              name=\"lastName\"\n              id=\"lastName\"\n              type=\"text\"\n              placeholder={\"Last Name *\"}\n              value={lastName}\n              onChange={this.validateOnChange}\n            />\n          </div>\n          <div className=\"field\">\n            <input\n              className={classNames(\"email\", {\n                \"is-danger\": !email && this.state.formTriggered\n              })}\n              required\n              name=\"email\"\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Email Address *\"\n              value={email}\n              onChange={this.validateOnChange}\n            />\n          </div>\n          <div className=\"field\">\n            <div className=\"with-icon\">\n              <input\n                required\n                className={classNames(\"password\", {\n                  \"is-danger\": !password && this.state.formTriggered\n                })}\n                name=\"password\"\n                id=\"password\"\n                type={this.state.typeSwitcher ? \"text\" : \"password\"}\n                placeholder=\"Set A Password *\"\n                value={password}\n                onChange={this.validateOnChange}\n              />\n              <i\n                onClick={() =>\n                  this.setState({ typeSwitcher: !this.state.typeSwitcher })\n                }\n                className={\n                  this.state.typeSwitcher ? \"fas fa-lock-open\" : \"fas fa-lock\"\n                }\n              ></i>\n            </div>\n          </div>\n          <button onClick={this.onSubmit} className=\"large active\">\n            GET STARED\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  onSubmit = () => {\n    this.setState({ formTriggered: true });\n    //here is the place for back-end call\n  };\n\n  validateOnChange = event => {\n    const input = event.target;\n    const form = input.form;\n    const value = input.value;\n\n    this.setState({\n      [form.name]: {\n        ...this.state[form.name],\n        [input.name]: value\n      }\n    });\n  };\n\n  render() {\n    return <div className=\"sign-up-wrapper\">{this.signUp}</div>;\n  }\n}\n\nexport default SignUp;\n","import React, { Component } from \"react\";\nimport { Link, BrowserRouter } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\nclass LogIn extends Component {\n  state = {\n    loginForm: {\n      email: \"\",\n      password: \"\"\n    },\n    typeSwitcher: false,\n    formTriggered: false\n  };\n\n  get heading() {\n    return (\n      <div className=\"heading\">\n        <h2>Welcome Back!</h2>\n      </div>\n    );\n  }\n\n  get loginForm() {\n    const { email, password } = this.state.loginForm;\n    return (\n      <div className=\"form-wrapper\">\n        {this.heading}\n        <form name=\"loginForm\" onSubmit={this.onSubmit}>\n          <div className=\"field\">\n            <input\n              autoComplete=\"off\"\n              required\n              className={classNames(\"email\", {\n                \"is-danger\": !email && this.state.formTriggered\n              })}\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              placeholder=\"Email Address *\"\n              value={email}\n              onChange={this.validateOnChange}\n            />\n          </div>\n          <div className=\"field\">\n            <div className=\"with-icon\">\n              <input\n                required\n                className={classNames(\"password\", {\n                  \"is-danger\": !password && this.state.formTriggered\n                })}\n                name=\"password\"\n                id=\"password\"\n                type={this.state.typeSwitcher ? \"text\" : \"password\"}\n                placeholder=\"Set A Password *\"\n                value={password}\n                onChange={this.validateOnChange}\n              />\n              <i\n                onClick={() =>\n                  this.setState({ typeSwitcher: !this.state.typeSwitcher })\n                }\n                className={\n                  this.state.typeSwitcher ? \"fas fa-lock-open\" : \"fas fa-lock\"\n                }\n              ></i>\n            </div>\n          </div>\n          <div className=\"forgot-description\">\n            <BrowserRouter>\n              <Link to=\"#\" href=\"#\">\n                Forgot Password?\n              </Link>\n            </BrowserRouter>\n          </div>\n          <button onClick={this.onSubmit} className=\"large active\">\n            LOG IN\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  onSubmit = () => {\n    this.setState({ formTriggered: true });\n    //here is the place for another back-end call\n  };\n\n  validateOnChange = event => {\n    const input = event.target;\n    const form = input.form;\n    const value = input.value;\n\n    this.setState({\n      [form.name]: {\n        ...this.state[form.name],\n        [input.name]: value\n      }\n    });\n  };\n\n  render() {\n    return <div className=\"log-in-wrapper\">{this.loginForm}</div>;\n  }\n}\n\nexport default LogIn;\n","import React, { Component } from \"react\";\nimport classNames from \"classnames\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./styles/App.css\";\n\nimport SignUp from \"./Components/SignUp\";\nimport LogIn from \"./Components/LogIn\";\n\nclass app extends Component {\n  state = {\n    signUpFormActive: true\n  };\n\n  get formToggler() {\n    return (\n      <div className=\"toggler-wrapper\">\n        <button\n          onClick={this.toggleForm}\n          className={classNames(\"medium\", {\n            active: this.state.signUpFormActive\n          })}\n        >\n          Sign Up\n        </button>\n        <button\n          onClick={this.toggleForm}\n          className={classNames(\"medium\", {\n            active: !this.state.signUpFormActive\n          })}\n        >\n          Log in\n        </button>\n      </div>\n    );\n  }\n\n  toggleForm = () => {\n    this.setState({ signUpFormActive: !this.state.signUpFormActive });\n  };\n\n  render() {\n    return (\n      <div className=\"main-wrapper\">\n        <div className=\"login-wrapper\">\n          {this.formToggler}\n          {this.state.signUpFormActive && (\n            <CSSTransition\n              in={true}\n              appear={true}\n              timeout={300}\n              classNames=\"fade\"\n            >\n              <SignUp />\n            </CSSTransition>\n          )}\n          {!this.state.signUpFormActive && (\n            <CSSTransition\n              in={true}\n              appear={true}\n              timeout={300}\n              classNames=\"fade\"\n            >\n              <LogIn />\n            </CSSTransition>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport LoginApp from \"./LoginApp\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/@fortawesome/fontawesome-free/css/all.css\";\n\nReactDOM.render(<LoginApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}